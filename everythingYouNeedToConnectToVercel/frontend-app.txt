import React, { useState, useEffect, useRef } from 'react';
import { generateCompletion, checkApiHealth } from './api';
import './App.css';

function App() {
  const [prompt, setPrompt] = useState('');
  const [response, setResponse] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [apiStatus, setApiStatus] = useState('checking');
  const responseRef = useRef(null);
  
  // Check API health on component mount
  useEffect(() => {
    const checkApi = async () => {
      const isHealthy = await checkApiHealth();
      setApiStatus(isHealthy ? 'connected' : 'disconnected');
    };
    
    checkApi();
    // Check again every 30 seconds
    const interval = setInterval(checkApi, 30000);
    
    return () => clearInterval(interval);
  }, []);
  
  // Auto-scroll to bottom of response
  useEffect(() => {
    if (responseRef.current) {
      responseRef.current.scrollTop = responseRef.current.scrollHeight;
    }
  }, [response]);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!prompt.trim() || isGenerating) return;
    
    setIsGenerating(true);
    setResponse('');
    
    await generateCompletion(
      prompt,
      // On each chunk
      (chunk, fullText) => {
        setResponse(fullText);
      },
      // On completion
      (finalResponse) => {
        setIsGenerating(false);
      },
      // On error
      (error) => {
        setResponse(`Error: ${error.message}`);
        setIsGenerating(false);
      }
    );
  };
  
  // Generate connection status indicator
  const renderConnectionStatus = () => {
    switch (apiStatus) {
      case 'checking':
        return <span className="status checking">Checking connection...</span>;
      case 'connected':
        return <span className="status connected">Connected to LLM</span>;
      case 'disconnected':
        return (
          <span className="status disconnected">
            Not connected to LLM. Make sure your backend server is running.
          </span>
        );
      default:
        return null;
    }
  };
  
  return (
    <div className="app">
      <header>
        <h1>Ollama Chat</h1>
        {renderConnectionStatus()}
      </header>
      
      <div className="chat-container">
        <div className="response-area" ref={responseRef}>
          {response ? (
            <div className="message">
              <div className="message-content">{response}</div>
            </div>
          ) : (
            <div className="placeholder">
              Responses will appear here. Try asking a question!
            </div>
          )}
        </div>
        
        <form onSubmit={handleSubmit} className="prompt-form">
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Enter your prompt here..."
            disabled={isGenerating || apiStatus === 'disconnected'}
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSubmit(e);
              }
            }}
          />
          <button 
            type="submit" 
            disabled={isGenerating || !prompt.trim() || apiStatus === 'disconnected'}
          >
            {isGenerating ? 'Generating...' : 'Send'}
          </button>
        </form>
      </div>
      
      <footer>
        <p>
          Powered by Ollama â€¢ {isGenerating ? 'Generating response...' : 'Ready for input'}
        </p>
      </footer>
    </div>
  );
}

export default App;